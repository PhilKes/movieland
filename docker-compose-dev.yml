# Docker Compose for entire Full Stack Application running on localhost with locally built Docker Containers

version: '3.3'
services:
  # App backend service
  movieland-spring-admin:
    container_name: movieland-spring-admin
    build:
      context: movieland-spring-admin
      dockerfile: Dockerfile
    image: movieland-spring-admin
    ports:
      - "8081:8081"
    environment:
      PORT: 8081
    network_mode: host
  # Frontend Service
  movieland-frontend:
    container_name: movieland-frontend
    build:
      context: movieland-frontend
      dockerfile: Dockerfile
    image: movieland-frontend
    ports:
      - "4000:4000"
    environment:
      PORT: 4000
    network_mode: host
  # Database Service (Postgresql)
#  movieland-db:
#    container_name: movieland-db
#    image: 'postgres:13.1-alpine'
#    ports:
#      - "5432:5432"
#    environment:
#      - POSTGRES_USER=movielandadmin
#      - POSTGRES_PASSWORD=movielandadmin
#      - POSTGRES_DB=movieland_db
#    volumes:
#      - db-data:/var/lib/postgresql/data


  movieland-prometheus:
    image: prom/prometheus:v2.41.0
    container_name: prometheus
    restart: unless-stopped
    volumes:
      - ./monitoring/prometheus/prometheus-dev.yml:/etc/prometheus/prometheus.yml
    ports:
      - "9090:9090"
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "9090" ]
    extra_hosts:
      - "host.docker.internal:host-gateway"
    network_mode: host

  movieland-grafana:
    image: grafana/grafana:9.3.2
    container_name: grafana
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      GF_SECURITY_ADMIN_USER: admin
      GF_SECURITY_ADMIN_PASSWORD: admin
      PROMETHEUS_SERVER: http://localhost:9090
      TEMPO_SERVER: http://localhost:3200
      LOKI_SERVER: http://localhost:3100
    volumes:
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - movieland-prometheus
    healthcheck:
      test: [ "CMD", "nc", "-z", "localhost", "3000" ]
    user: "1000"
    network_mode: host

  movieland-promtail:
    image: grafana/promtail:2.7.1
    container_name: promtail
    volumes:
      - ./monitoring/promtail/promtail-dev.yml:/etc/promtail/promtail.yml
    command: -config.file=/etc/promtail/promtail.yml
    network_mode: host

  # Source: https://github.com/marcingrzejszczak/observability-boot-blog-post
  movieland-tempo:
    container_name: tempo
    image: grafana/tempo:1.5.0
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ./monitoring/tempo/tempo-local.yaml:/etc/tempo.yaml:ro
      - tempo-data:/tmp/tempo
    ports:
      - "14268"  # jaeger ingest
      - "9411:9411" # zipkin
    network_mode: host

  movieland-loki:
    container_name: loki
    image: grafana/loki:2.7.1
    command: [ "-config.file=/etc/loki/local-config.yaml", "-server.grpc-listen-port=9097" ]
    ports:
      - "3100:3100"                                   # loki needs to be exposed so it receives logs
    environment:
      - JAEGER_AGENT_HOST=tempo
      - JAEGER_ENDPOINT=http://localhost:14268/api/traces # send traces to Tempo
      - JAEGER_SAMPLER_TYPE=const
      - JAEGER_SAMPLER_PARAM=1
    network_mode: host
# Volumes
volumes:
  db-data:
  tempo-data:
  promtail-data:

